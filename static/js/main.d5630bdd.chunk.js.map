{"version":3,"sources":["Home.js","Creates.js","Display.js","App.js","serviceWorker.js","index.js","images/super.jpg"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getApi","fetch","then","response","json","data","setState","characters","state","console","log","react_default","a","createElement","Fragment","Container","Row_default","map","character","Col_default","Card_default","bg","style","width","marginBottom","variant","src","image","Body","Title","name","Text","shortDescription","react_router_dom","to","id","Button","Component","Creates","onChangeName","bind","assertThisInitialized","onChangeshortDescription","Name","e","target","value","type","defaultValue","onChange","Display","match","params","alt","App","Navbar_default","Brand","href","Nav_default","className","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d5630bdd.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport {Container, Button} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\n\nexport default class Home extends Component {\n    constructor(props) {\n    super(props);\n    \n      this.state = {\n        characters: [],\n      }\n    }\n    \n    getApi = () => {\n    fetch(\"https://character-database.becode.xyz/characters\")\n    .then(response => response.json())\n    .then(data => this.setState({ characters: data }));\n    }\n    componentDidMount() {\n      this.getApi()\n    }\n  render() {\n      const { characters } = this.state;\n      console.log (characters);\n      \n    return (\n      <React.Fragment>\n        \n        \n        <Container>\n            <Row> \n                  {this.state.characters.map(character =>   \n                  <Col>             \n                    <Card bg=\"dark\" style={{ width: '30rem', marginBottom: '2rem' }}>\n                    <div>\n                      <img variant=\"top\" src={\"data:image;base64,\"+character.image}/>\n                    </div>\n                      <Card.Body>\n                        <Card.Title>{character.name}</Card.Title>\n                        <Card.Text>\n                          {character.shortDescription}\n                        </Card.Text>\n                        <Link to={\"/character/\"+character.id}><Button>Plus d'info</Button></Link>\n                        <Link to={\"/Edit-\"+character.id}><Button>Edit</Button></Link>\n                      </Card.Body>\n                    </Card>   \n                  </Col>           \n                  )} \n              </Row> \n        </Container>\n       </React.Fragment>\n    );\n  }\n}\n  \n  ","import React, { Component } from 'react';\n\n\nexport default class Creates extends Component{\n    constructor(){\n        super()\n        this.onChangeName=this.onChangeName.bind(this)\n        this.onChangeshortDescription=this.onChangeshortDescription.bind(this)\n        this.state = {\n            Name:'',\n            shortDescription:''\n        }\n    }\n\n    onSubmit(e){\n\n    }\n\n    onChangeName(e){\n        this.setState(\n            {\n                Name:e.target.value\n            }\n        )\n    }\n    onChangeshortDescription(e){\n        this.setState(\n            {\n                shortDescription:e.target.value\n            }\n        )\n    }\n    render(){\n        return(\n            <div>\n                <form>\n                    <input type=\"text\" defaultValue={this.state.name} onChange={this.onChangeName}/>\n                    <input type=\"text\" defaultValue={this.state.shortDescription} onChange={this.onChangeshortDescription}/>              \n                </form>\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\n\n\n\n\n\nexport default class Display extends Component {\n      constructor(props) {\n        super(props);\n        \n        this.state = {\n          character: [],\n        };\n      }\n        \n      getApi = () => {\n        fetch(\"https://character-database.becode.xyz/characters/\"+this.props.match.params.id)\n        .then(response => response.json())\n        .then(data => this.setState({ character: data }));\n      }\n      componentDidMount() {\n          this.getApi()\n      }\n      render() {\n        const { character } = this.state;\n        console.log (character);\n        \n        return (\n          <div> \n              {this.state.character.name} <img src={\"data:image;base64,\"+character.image} alt=\"Not Found\" />\n          </div>\n        );\n      }\n  }","import React, { Component } from 'react';\nimport logo from './images/super.jpg';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport {Switch, Route, Link} from 'react-router-dom';\nimport { HashRouter} from 'react-router-dom';\n\nimport Home from './Home';\nimport Creates from './Creates';\nimport Display from './Display';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Link to={\"/\"}><Navbar.Brand href=\"home\">Home</Navbar.Brand></Link>\n            <Nav className=\"mr-auto\">\n              <Link to=\"/creates\">Creates</Link>\n            </Nav>\n          </Navbar>   \n          <HashRouter>\n            <div>\n              <Switch>\n                  <Route exact path=\"/\" component={Home}/>\n                  <Route exact path=\"/character/:id\" component={Display}/>\n                  <Route exact path=\"/creates\" component={Creates}/>\n              </Switch>\n            </div>      \n          </HashRouter>   \n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter} from 'react-router-dom';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/super.f2b82258.jpg\";"],"sourceRoot":""}